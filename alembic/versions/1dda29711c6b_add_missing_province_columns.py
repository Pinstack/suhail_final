"""add_missing_province_columns

Revision ID: 1dda29711c6b
Revises: ecb5e54cbea4
Create Date: 2025-07-10 08:05:52.732394

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '1dda29711c6b'
down_revision: Union[str, Sequence[str], None] = 'ecb5e54cbea4'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop tables and indexes only if they exist (for fresh database compatibility)
    connection = op.get_bind()
    
    # Check and drop parcels_enriched table if it exists
    if connection.dialect.has_table(connection, 'parcels_enriched'):
        op.drop_index(op.f('idx_parcels_enriched_geometry'), table_name='parcels_enriched', postgresql_using='gist')
        op.drop_table('parcels_enriched')
    
    # Check and drop temp tables if they exist
    temp_tables = [
        'temp_qi_population_metrics',
        'temp_metro_stations', 
        'temp_parcels',
        'temp_subdivisions',
        'temp_metro_lines',
        'temp_riyadh_bus_stations',
        'temp_neighborhoods',
        'temp_qi_stripes',
        'temp_bus_lines'
    ]
    
    for table in temp_tables:
        if connection.dialect.has_table(connection, table):
            op.drop_index(op.f(f'idx_{table}_geometry'), table_name=table, postgresql_using='gist')
            op.drop_table(table)
    
    # op.drop_table('spatial_ref_sys')  # Commented out - required by PostGIS extension
    # op.create_unique_constraint('_parcel_rule_uc', 'building_rules', ['parcel_objectid', 'building_rule_id'])  # Already exists, skip to avoid error
    # op.add_column('bus_lines', sa.Column('id', sa.Integer(), autoincrement=False, nullable=False))
    # op.add_column('bus_lines', sa.Column('busroute', sa.String(), nullable=True))
    # op.add_column('bus_lines', sa.Column('route_name', sa.String(), nullable=True))
    # op.add_column('bus_lines', sa.Column('route_type', sa.String(), nullable=True))
    # op.alter_column('bus_lines', 'geometry',
    #            existing_type=geoalchemy2.types.Geometry(srid=4326, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True),
    #            type_=geoalchemy2.types.Geometry(geometry_type='MULTILINESTRING', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'),
    #            existing_nullable=True)
    # op.add_column('metro_lines', sa.Column('id', sa.Integer(), autoincrement=False, nullable=False))
    # op.alter_column('metro_lines', 'geometry',
    #            existing_type=geoalchemy2.types.Geometry(geometry_type='LINESTRING', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True),
    #            type_=geoalchemy2.types.Geometry(geometry_type='MULTILINESTRING', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'),
    #            existing_nullable=True)
    # op.alter_column('metro_lines', 'track_color',
    #            existing_type=sa.TEXT(),
    #            type_=sa.String(),
    #            existing_nullable=True)
    # op.alter_column('metro_lines', 'track_name',
    #            existing_type=sa.TEXT(),
    #            type_=sa.String(),
    #            existing_nullable=True)
    
    # Drop region_id column only if it exists
    if connection.dialect.has_table(connection, 'parcels'):
        inspector = sa.inspect(connection)
        columns = [col['name'] for col in inspector.get_columns('parcels')]
        if 'region_id' in columns:
            op.drop_column('parcels', 'region_id')
    op.add_column('provinces', sa.Column('province_name_ar', sa.String(), nullable=True))
    op.add_column('provinces', sa.Column('centroid_lon', sa.Float(), nullable=True))
    op.add_column('provinces', sa.Column('centroid_lat', sa.Float(), nullable=True))
    op.add_column('provinces', sa.Column('centroid_x', sa.Float(), nullable=True))
    op.add_column('provinces', sa.Column('centroid_y', sa.Float(), nullable=True))
    op.add_column('provinces', sa.Column('tile_server_url', sa.String(), nullable=True))
    op.add_column('provinces', sa.Column('bbox_sw_lon', sa.Float(), nullable=True))
    op.add_column('provinces', sa.Column('bbox_sw_lat', sa.Float(), nullable=True))
    op.add_column('provinces', sa.Column('bbox_ne_lon', sa.Float(), nullable=True))
    op.add_column('provinces', sa.Column('bbox_ne_lat', sa.Float(), nullable=True))
    op.add_column('provinces', sa.Column('region_id', sa.BigInteger(), nullable=True))
    op.add_column('tile_urls', sa.Column('retry_count', sa.Integer(), server_default='0', nullable=False))
    op.alter_column('tile_urls', 'url',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('tile_urls', 'error_message',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_index(op.f('idx_tile_urls_status'), table_name='tile_urls')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('idx_tile_urls_status'), 'tile_urls', ['status'], unique=False)
    op.alter_column('tile_urls', 'error_message',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('tile_urls', 'url',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('tile_urls', 'retry_count')
    op.drop_column('provinces', 'region_id')
    op.drop_column('provinces', 'bbox_ne_lat')
    op.drop_column('provinces', 'bbox_ne_lon')
    op.drop_column('provinces', 'bbox_sw_lat')
    op.drop_column('provinces', 'bbox_sw_lon')
    op.drop_column('provinces', 'tile_server_url')
    op.drop_column('provinces', 'centroid_y')
    op.drop_column('provinces', 'centroid_x')
    op.drop_column('provinces', 'centroid_lat')
    op.drop_column('provinces', 'centroid_lon')
    op.drop_column('provinces', 'province_name_ar')
    op.add_column('parcels', sa.Column('region_id', sa.BIGINT(), autoincrement=False, nullable=True))
    op.alter_column('metro_lines', 'track_name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('metro_lines', 'track_color',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('metro_lines', 'geometry',
               existing_type=geoalchemy2.types.Geometry(geometry_type='MULTILINESTRING', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'),
               type_=geoalchemy2.types.Geometry(geometry_type='LINESTRING', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True),
               existing_nullable=True)
    op.drop_column('metro_lines', 'id')
    op.alter_column('bus_lines', 'geometry',
               existing_type=geoalchemy2.types.Geometry(geometry_type='MULTILINESTRING', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'),
               type_=geoalchemy2.types.Geometry(srid=4326, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True),
               existing_nullable=True)
    op.drop_column('bus_lines', 'route_type')
    op.drop_column('bus_lines', 'route_name')
    op.drop_column('bus_lines', 'busroute')
    op.drop_column('bus_lines', 'id')
    op.drop_constraint('_parcel_rule_uc', 'building_rules', type_='unique')
    op.create_table('temp_bus_lines',
    sa.Column('geometry', geoalchemy2.types.Geometry(srid=4326, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True), autoincrement=False, nullable=True)
    )
    op.create_index(op.f('idx_temp_bus_lines_geometry'), 'temp_bus_lines', ['geometry'], unique=False, postgresql_using='gist')
    op.create_table('temp_qi_stripes',
    sa.Column('geometry', geoalchemy2.types.Geometry(geometry_type='POLYGON', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True), autoincrement=False, nullable=True),
    sa.Column('strip_id', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_index(op.f('idx_temp_qi_stripes_geometry'), 'temp_qi_stripes', ['geometry'], unique=False, postgresql_using='gist')
    op.create_table('temp_neighborhoods',
    sa.Column('geometry', geoalchemy2.types.Geometry(geometry_type='POLYGON', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True), autoincrement=False, nullable=True),
    sa.Column('neighborhood_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('shape_area', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('transaction_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('zoning_color', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('region_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('province_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('price_of_meter', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('zoning_id', sa.BIGINT(), autoincrement=False, nullable=True)
    )
    op.create_index(op.f('idx_temp_neighborhoods_geometry'), 'temp_neighborhoods', ['geometry'], unique=False, postgresql_using='gist')
    # op.create_table('spatial_ref_sys',  # Commented out - managed by PostGIS extension
    # sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('auth_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    # sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('srtext', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    # sa.Column('proj4text', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    # sa.CheckConstraint('srid > 0 AND srid <= 998999', name=op.f('spatial_ref_sys_srid_check')),
    # sa.PrimaryKeyConstraint('srid', name=op.f('spatial_ref_sys_pkey'))
    # )
    op.create_table('temp_riyadh_bus_stations',
    sa.Column('geometry', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True), autoincrement=False, nullable=True),
    sa.Column('station_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('station_code', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_index(op.f('idx_temp_riyadh_bus_stations_geometry'), 'temp_riyadh_bus_stations', ['geometry'], unique=False, postgresql_using='gist')
    op.create_table('temp_metro_lines',
    sa.Column('geometry', geoalchemy2.types.Geometry(geometry_type='LINESTRING', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True), autoincrement=False, nullable=True),
    sa.Column('track_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('track_color', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('track_length', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True)
    )
    op.create_index(op.f('idx_temp_metro_lines_geometry'), 'temp_metro_lines', ['geometry'], unique=False, postgresql_using='gist')
    op.create_table('temp_subdivisions',
    sa.Column('geometry', geoalchemy2.types.Geometry(srid=4326, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True), autoincrement=False, nullable=True),
    sa.Column('price_of_meter', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('zoning_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('zoning_color', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('province_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('subdivision_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('subdivision_no', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('shape_area', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('transaction_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True)
    )
    op.create_index(op.f('idx_temp_subdivisions_geometry'), 'temp_subdivisions', ['geometry'], unique=False, postgresql_using='gist')
    op.create_table('temp_parcels',
    sa.Column('geometry', geoalchemy2.types.Geometry(srid=4326, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True), autoincrement=False, nullable=True),
    sa.Column('block_no', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('landuseagroup', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('parcel_no', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('subdivision_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('zoning_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('landuseadetailed', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('price_of_meter', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ruleid', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('province_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('parcel_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('subdivision_no', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('transaction_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('parcel_objectid', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('neighborhood_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('shape_area', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('zoning_color', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_index(op.f('idx_temp_parcels_geometry'), 'temp_parcels', ['geometry'], unique=False, postgresql_using='gist')
    op.create_table('temp_metro_stations',
    sa.Column('geometry', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True), autoincrement=False, nullable=True),
    sa.Column('station_code', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('station_name', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_index(op.f('idx_temp_metro_stations_geometry'), 'temp_metro_stations', ['geometry'], unique=False, postgresql_using='gist')
    op.create_table('temp_qi_population_metrics',
    sa.Column('geometry', geoalchemy2.types.Geometry(geometry_type='POLYGON', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True), autoincrement=False, nullable=True),
    sa.Column('grid_id', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_index(op.f('idx_temp_qi_population_metrics_geometry'), 'temp_qi_population_metrics', ['geometry'], unique=False, postgresql_using='gist')
    op.create_table('parcels_enriched',
    sa.Column('geometry', geoalchemy2.types.Geometry(srid=4326, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True), autoincrement=False, nullable=True),
    sa.Column('block_no', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('landuseagroup', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('parcel_no', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('subdivision_id', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('zoning_id', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('landuseadetailed', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('price_of_meter', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ruleid', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('province_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('parcel_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('subdivision_no', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('transaction_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('parcel_objectid', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('neighborhood_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('shape_area', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('zoning_color', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('index_right', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('region_id', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True)
    )
    op.create_index(op.f('idx_parcels_enriched_geometry'), 'parcels_enriched', ['geometry'], unique=False, postgresql_using='gist')
    # ### end Alembic commands ###
