"""add missing pipeline tables for riyadh pipeline

Revision ID: 9e5cad7a9d98
Revises: 8e35f861f1f2
Create Date: 2025-07-04 22:31:16.549912

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import geoalchemy2


# revision identifiers, used by Alembic.
revision: str = '9e5cad7a9d98'
down_revision: Union[str, Sequence[str], None] = '8e35f861f1f2'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('bus_lines',
    sa.Column('id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('geometry', geoalchemy2.types.Geometry(geometry_type='MULTILINESTRING', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('busroute', sa.String(), nullable=True),
    sa.Column('route_name', sa.String(), nullable=True),
    sa.Column('route_type', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.execute("""DO $$\nBEGIN\n    IF NOT EXISTS (\n        SELECT 1 FROM pg_class c\n        JOIN pg_namespace n ON n.oid = c.relnamespace\n        WHERE c.relname = 'idx_bus_lines_geometry'\n          AND n.nspname = 'public'\n    ) THEN\n        CREATE INDEX idx_bus_lines_geometry ON bus_lines USING gist (geometry);\n    END IF;\nEND$$;\n""")
    op.create_table('metro_stations',
    sa.Column('station_code', sa.String(), nullable=False),
    sa.Column('geometry', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('station_name', sa.String(), nullable=True),
    sa.Column('line', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('station_code')
    )
    op.execute("""DO $$\nBEGIN\n    IF NOT EXISTS (\n        SELECT 1 FROM pg_class c\n        JOIN pg_namespace n ON n.oid = c.relnamespace\n        WHERE c.relname = 'idx_metro_stations_geometry'\n          AND n.nspname = 'public'\n    ) THEN\n        CREATE INDEX idx_metro_stations_geometry ON metro_stations USING gist (geometry);\n    END IF;\nEND$$;\n""")
    op.create_table('parcels_centroids',
    sa.Column('parcel_no', sa.String(), nullable=False),
    sa.Column('geometry', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('transaction_date', sa.DateTime(), nullable=True),
    sa.Column('transaction_price', sa.Float(), nullable=True),
    sa.Column('price_of_meter', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('parcel_no')
    )
    op.execute("""DO $$\nBEGIN\n    IF NOT EXISTS (\n        SELECT 1 FROM pg_class c\n        JOIN pg_namespace n ON n.oid = c.relnamespace\n        WHERE c.relname = 'idx_parcels_centroids_geometry'\n          AND n.nspname = 'public'\n    ) THEN\n        CREATE INDEX idx_parcels_centroids_geometry ON parcels_centroids USING gist (geometry);\n    END IF;\nEND$$;\n""")
    op.create_table('qi_population_metrics',
    sa.Column('grid_id', sa.String(), nullable=False),
    sa.Column('population', sa.Integer(), nullable=True),
    sa.Column('geometry', geoalchemy2.types.Geometry(geometry_type='POLYGON', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.PrimaryKeyConstraint('grid_id')
    )
    op.execute("""DO $$\nBEGIN\n    IF NOT EXISTS (\n        SELECT 1 FROM pg_class c\n        JOIN pg_namespace n ON n.oid = c.relnamespace\n        WHERE c.relname = 'idx_qi_population_metrics_geometry'\n          AND n.nspname = 'public'\n    ) THEN\n        CREATE INDEX idx_qi_population_metrics_geometry ON qi_population_metrics USING gist (geometry);\n    END IF;\nEND$$;\n""")
    op.create_table('qi_stripes',
    sa.Column('strip_id', sa.String(), nullable=False),
    sa.Column('geometry', geoalchemy2.types.Geometry(geometry_type='POLYGON', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('value', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('strip_id')
    )
    op.execute("""DO $$\nBEGIN\n    IF NOT EXISTS (\n        SELECT 1 FROM pg_class c\n        JOIN pg_namespace n ON n.oid = c.relnamespace\n        WHERE c.relname = 'idx_qi_stripes_geometry'\n          AND n.nspname = 'public'\n    ) THEN\n        CREATE INDEX idx_qi_stripes_geometry ON qi_stripes USING gist (geometry);\n    END IF;\nEND$$;\n""")
    op.create_table('riyadh_bus_stations',
    sa.Column('station_code', sa.String(), nullable=False),
    sa.Column('geometry', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('station_name', sa.String(), nullable=True),
    sa.Column('route', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('station_code')
    )
    op.execute("""DO $$\nBEGIN\n    IF NOT EXISTS (\n        SELECT 1 FROM pg_class c\n        JOIN pg_namespace n ON n.oid = c.relnamespace\n        WHERE c.relname = 'idx_riyadh_bus_stations_geometry'\n          AND n.nspname = 'public'\n    ) THEN\n        CREATE INDEX idx_riyadh_bus_stations_geometry ON riyadh_bus_stations USING gist (geometry);\n    END IF;\nEND$$;\n""")
    op.drop_index(op.f('idx_streets_geometry'), table_name='streets', postgresql_using='gist')
    op.drop_table('streets')
    op.drop_index(op.f('idx_temp_neighborhoods_debug_geometry'), table_name='temp_neighborhoods_debug', postgresql_using='gist')
    op.drop_table('temp_neighborhoods_debug')
    op.execute("""
    DO $$
    BEGIN
        IF NOT EXISTS (
            SELECT 1 FROM pg_constraint WHERE conname = '_parcel_rule_uc'
        ) THEN
            ALTER TABLE building_rules ADD CONSTRAINT _parcel_rule_uc UNIQUE (parcel_objectid, building_rule_id);
        END IF;
    END$$;
    """)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('_parcel_rule_uc', 'building_rules', type_='unique')
    op.create_table('temp_neighborhoods_debug',
    sa.Column('parcel_objectid', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('geometry', geoalchemy2.types.Geometry(srid=4326, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True), autoincrement=False, nullable=True),
    sa.Column('shape_area', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('transaction_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('price_of_meter', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('landuseagroup', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('zoning_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('subdivision_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('neighborhood_ar', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('municipality_ar', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('parcel_no', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('subdivision_no', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('zoning_color', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_index(op.f('idx_temp_neighborhoods_debug_geometry'), 'temp_neighborhoods_debug', ['geometry'], unique=False, postgresql_using='gist')
    op.create_table('streets',
    sa.Column('street_id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('geometry', geoalchemy2.types.Geometry(geometry_type='MULTILINESTRING', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('street_id', name=op.f('streets_pkey'))
    )
    op.create_index(op.f('idx_streets_geometry'), 'streets', ['geometry'], unique=False, postgresql_using='gist')
    op.drop_index('idx_riyadh_bus_stations_geometry', table_name='riyadh_bus_stations', postgresql_using='gist')
    op.drop_table('riyadh_bus_stations')
    op.drop_index('idx_qi_stripes_geometry', table_name='qi_stripes', postgresql_using='gist')
    op.drop_table('qi_stripes')
    op.drop_index('idx_qi_population_metrics_geometry', table_name='qi_population_metrics', postgresql_using='gist')
    op.drop_table('qi_population_metrics')
    op.drop_index('idx_parcels_centroids_geometry', table_name='parcels_centroids', postgresql_using='gist')
    op.drop_table('parcels_centroids')
    op.drop_index('idx_metro_stations_geometry', table_name='metro_stations', postgresql_using='gist')
    op.drop_table('metro_stations')
    op.drop_index('idx_bus_lines_geometry', table_name='bus_lines', postgresql_using='gist')
    op.drop_table('bus_lines')
    # ### end Alembic commands ###
