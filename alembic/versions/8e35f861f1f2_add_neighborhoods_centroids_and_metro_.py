"""add neighborhoods_centroids and metro_lines tables

Revision ID: 8e35f861f1f2
Revises: d887a212dddc
Create Date: 2025-07-04 22:13:43.475553

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import geoalchemy2


# revision identifiers, used by Alembic.
revision: str = '8e35f861f1f2'
down_revision: Union[str, Sequence[str], None] = 'd887a212dddc'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('metro_lines',
    sa.Column('id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('geometry', geoalchemy2.types.Geometry(geometry_type='MULTILINESTRING', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('track_color', sa.String(), nullable=True),
    sa.Column('track_length', sa.Float(), nullable=True),
    sa.Column('track_name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.execute("""
    DO $$
    BEGIN
        IF NOT EXISTS (
            SELECT 1 FROM pg_class c
            JOIN pg_namespace n ON n.oid = c.relnamespace
            WHERE c.relname = 'idx_metro_lines_geometry'
              AND n.nspname = 'public'
        ) THEN
            CREATE INDEX idx_metro_lines_geometry ON metro_lines USING gist (geometry);
        END IF;
    END$$;
    """)
    op.create_table('neighborhoods_centroids',
    sa.Column('id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('geometry', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('neighborh_aname', sa.String(), nullable=True),
    sa.Column('province_id', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.execute("""
    DO $$
    BEGIN
        IF NOT EXISTS (
            SELECT 1 FROM pg_class c
            JOIN pg_namespace n ON n.oid = c.relnamespace
            WHERE c.relname = 'idx_neighborhoods_centroids_geometry'
              AND n.nspname = 'public'
        ) THEN
            CREATE INDEX idx_neighborhoods_centroids_geometry ON neighborhoods_centroids USING gist (geometry);
        END IF;
    END$$;
    """)
    op.drop_index(op.f('idx_temp_neighborhoods_debug_geometry'), table_name='temp_neighborhoods_debug', postgresql_using='gist')
    op.drop_table('temp_neighborhoods_debug')
    # op.drop_table('spatial_ref_sys')
    op.drop_index(op.f('idx_qi_population_metrics_geometry'), table_name='qi_population_metrics', postgresql_using='gist')
    op.drop_table('qi_population_metrics')
    op.drop_index(op.f('idx_parcels_centroids_geometry'), table_name='parcels_centroids', postgresql_using='gist')
    op.drop_table('parcels_centroids')
    op.drop_index(op.f('idx_bus_lines_geometry'), table_name='bus_lines', postgresql_using='gist')
    op.drop_table('bus_lines')
    op.drop_index(op.f('idx_dimensions_geometry'), table_name='dimensions', postgresql_using='gist')
    op.drop_table('dimensions')
    op.drop_index(op.f('idx_riyadh_bus_stations_geometry'), table_name='riyadh_bus_stations', postgresql_using='gist')
    op.drop_table('riyadh_bus_stations')
    op.drop_index(op.f('idx_metro_stations_geometry'), table_name='metro_stations', postgresql_using='gist')
    op.drop_table('metro_stations')
    op.drop_index(op.f('idx_qi_stripes_geometry'), table_name='qi_stripes', postgresql_using='gist')
    op.drop_table('qi_stripes')
    op.execute("""
    DO $$
    BEGIN
        IF NOT EXISTS (
            SELECT 1 FROM pg_constraint WHERE conname = '_parcel_rule_uc'
        ) THEN
            ALTER TABLE building_rules ADD CONSTRAINT _parcel_rule_uc UNIQUE (parcel_objectid, building_rule_id);
        END IF;
    END$$;
    """)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('_parcel_rule_uc', 'building_rules', type_='unique')
    op.create_table('qi_stripes',
    sa.Column('strip_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('geometry', geoalchemy2.types.Geometry(geometry_type='POLYGON', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True), autoincrement=False, nullable=True)
    )
    op.create_index(op.f('idx_qi_stripes_geometry'), 'qi_stripes', ['geometry'], unique=False, postgresql_using='gist')
    op.create_table('metro_stations',
    sa.Column('station_code', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('geometry', geoalchemy2.types.Geometry(geometry_type='POLYGON', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True), autoincrement=False, nullable=True)
    )
    op.create_index(op.f('idx_metro_stations_geometry'), 'metro_stations', ['geometry'], unique=False, postgresql_using='gist')
    op.create_table('riyadh_bus_stations',
    sa.Column('station_code', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('geometry', geoalchemy2.types.Geometry(srid=4326, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True), autoincrement=False, nullable=True)
    )
    op.create_index(op.f('idx_riyadh_bus_stations_geometry'), 'riyadh_bus_stations', ['geometry'], unique=False, postgresql_using='gist')
    op.create_table('dimensions',
    sa.Column('parcel_objectid', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('geometry', geoalchemy2.types.Geometry(srid=4326, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True), autoincrement=False, nullable=True)
    )
    op.create_index(op.f('idx_dimensions_geometry'), 'dimensions', ['geometry'], unique=False, postgresql_using='gist')
    op.create_table('bus_lines',
    sa.Column('busroute', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('geometry', geoalchemy2.types.Geometry(geometry_type='MULTIPOLYGON', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True), autoincrement=False, nullable=True)
    )
    op.create_index(op.f('idx_bus_lines_geometry'), 'bus_lines', ['geometry'], unique=False, postgresql_using='gist')
    op.create_table('parcels_centroids',
    sa.Column('parcel_no', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('geometry', geoalchemy2.types.Geometry(srid=4326, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True), autoincrement=False, nullable=True),
    sa.Column('transaction_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('transaction_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('price_of_meter', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True)
    )
    op.create_index(op.f('idx_parcels_centroids_geometry'), 'parcels_centroids', ['geometry'], unique=False, postgresql_using='gist')
    op.create_table('qi_population_metrics',
    sa.Column('grid_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('geometry', geoalchemy2.types.Geometry(geometry_type='POLYGON', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True), autoincrement=False, nullable=True)
    )
    op.create_index(op.f('idx_qi_population_metrics_geometry'), 'qi_population_metrics', ['geometry'], unique=False, postgresql_using='gist')
    op.create_table('spatial_ref_sys',
    sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('auth_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('srtext', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.Column('proj4text', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.CheckConstraint('srid > 0 AND srid <= 998999', name=op.f('spatial_ref_sys_srid_check')),
    sa.PrimaryKeyConstraint('srid', name=op.f('spatial_ref_sys_pkey'))
    )
    op.create_table('temp_neighborhoods_debug',
    sa.Column('parcel_objectid', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('geometry', geoalchemy2.types.Geometry(srid=4326, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True), autoincrement=False, nullable=True),
    sa.Column('shape_area', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('transaction_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('price_of_meter', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('landuseagroup', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('zoning_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('subdivision_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('neighborhood_ar', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('municipality_ar', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('parcel_no', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('subdivision_no', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('zoning_color', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_index(op.f('idx_temp_neighborhoods_debug_geometry'), 'temp_neighborhoods_debug', ['geometry'], unique=False, postgresql_using='gist')
    op.drop_index('idx_neighborhoods_centroids_geometry', table_name='neighborhoods_centroids', postgresql_using='gist')
    op.drop_table('neighborhoods_centroids')
    op.drop_index('idx_metro_lines_geometry', table_name='metro_lines', postgresql_using='gist')
    op.drop_table('metro_lines')
    # ### end Alembic commands ###
